import axios from "axios";
import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { RootState } from "../store";
import { TtopicsState } from "../../types.d/common.types.d";

const initialTopicsState: TtopicsState = {
  topicList: [],
  loading: { status: false, message: "" },
  error: { status: false, message: "" },
};

export const loadTopics = createAsyncThunk(
  "topicsSlice/fetchData",
  async (categoryId: string) => {
    const resp = await axios.get(
      `${process.env.REACT_APP_API_URL}/api/category/${categoryId}/topic`
    );
    // The value we return becomes the `fulfilled` action payload
    return resp.data;
  }
);

const topicsSlice = createSlice({
  name: "topics",
  initialState: initialTopicsState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(loadTopics.pending, (state) => {
        state.loading.status = true;
        state.loading.message = "loading topics....";
      })
      .addCase(loadTopics.fulfilled, (state, action) => {
        state.loading.status = false;
        state.loading.message = "";
        state.topicList = action.payload.topics;
      })
      .addCase(loadTopics.rejected, (state, action) => {
        state.loading.status = false;
        state.error.status = true;
        state.error.message = action.error.message || "";
      });
  },
});

export const topicsData = (state: RootState) => state.topicsReducer;
export default topicsSlice.reducer;
