import axios from "axios";
import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";

import { RootState } from "../store";
import { TcategoriesState } from "../../types.d/common.types.d";

const initialCategoriesState: TcategoriesState = {
  categoryList: [],
  loading: { status: false, message: "" },
  error: { status: false, message: "" },
};

export const loadCategories = createAsyncThunk(
  "categoriesSlice/fetchData",
  async () => {
    const resp = await axios.get(
      `${process.env.REACT_APP_API_URL}/api/category/${process.env.REACT_APP_PARENT_CATEGORY_ID}`
    );
    // The value we return becomes the `fulfilled` action payload
    return resp.data;
  }
);

const categoriesSlice = createSlice({
  name: "categories",
  initialState: initialCategoriesState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(loadCategories.pending, (state) => {
        state.loading.status = true;
        state.loading.message = "loading categories....";
      })
      .addCase(loadCategories.fulfilled, (state, action) => {
        state.loading.status = false;
        state.loading.message = "";
        state.categoryList = action.payload.children;
      })
      .addCase(loadCategories.rejected, (state, action) => {
        state.loading.status = false;
        state.error.status = true;
        state.error.message = action.error.message || "";
      });
  },
});

export const categoriesData = (state: RootState) => state.categoriesReducer;
export default categoriesSlice.reducer;
