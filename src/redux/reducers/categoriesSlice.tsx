import axios from "axios";
import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { RootState } from '../store';

type langauge = {
    name: string;
    description: string;
};
type translations = {
    en: langauge;
};
type category = {
    backgroundImage: string;
    translations: translations;
    cid: number;
    totalPostCount: number;
    totalTopicCount: number;
};
type TcategoriesState = {
    categoryList: Array<category>;  
    loading: {status: boolean, message: string};
    error: {status: boolean, message: string}  ;
};
const initialCategoriesState: TcategoriesState = {
    categoryList: [],
    loading:{status: false, message: ''},
    error:{status: false, message: ''},
};

export const loadCategories = createAsyncThunk(
  'categoriesSlice/fetchData',
  async () => {
    const resp = await axios.get(
        `${process.env.REACT_APP_API_URL}/api/category/${process.env.REACT_APP_PARENT_CATEGORY_ID}`
        );
    // The value we return becomes the `fulfilled` action payload
    return resp.data;
  }
);

const categoriesSlice = createSlice({
  name: 'categories',
  initialState:initialCategoriesState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(loadCategories.pending, (state) => {
        state.loading.status = true;
        state.loading.message = 'loading categories....';
      })
      .addCase(loadCategories.fulfilled, (state, action) => {
        state.loading.status = false;
        state.loading.message = 'loading categories....';
        console.log('action payload fullfilled', action)
        state.categoryList = action.payload;
      })
      .addCase(loadCategories.rejected, (state, action) => {
        state.loading.status = false;
        console.log('action rejected', action.error.message)
        state.error.status = true;
        state.error.message = action.error.message || '';
      });
  },
});

export const categoriesData = (state:RootState) => state.categoriesReducer
export default categoriesSlice.reducer
